diff -rNu irc2.11.2p3/doc/spoof.txt irc2.11.2p3.spoof/doc/spoof.txt
--- irc2.11.2p3/doc/spoof.txt
+++ irc2.11.2p3.spoof/doc/spoof.txt
@@ -0,0 +1,117 @@
+######################################################################
+
+spoof - host spoofs/IP cloaks for irc2.11.2p3
+
+######################################################################
+
+I-line extended with an optional field for a spoofed hostname:
+
+ I:<TARGET Host Addr>:<Password>:<TARGET Hosts NAME>:<Port>:<Class>
+ :<Flags>:<Spoofed Host Name>:
+
+the real hostname is replaced with the spoofed hostname, the real IP
+address is replaced by 255.255.255.255 (SPOOF_IP), and the username
+is prefixed with '_' (SPOOF_IDENTCHAR)
+
+I-lines with spoofed host names are hidden from STATS I
+
+channel modes will match the real IP address
+
+spoofed hostnames can be (T)K-Lined directly
+
+config.h defines:
+
+ SPOOF (enabled by default)
+  enable/disable the spoof feature
+
+ SPOOF_NOTICE (enabled by default)
+  show a notice to spoofed clients on connect
+
+ SPOOF_WHOISCLOAKED (enabled by default)
+  show in (local) whois if a client is spoofed
+
+ SPOOF_STATSDEFINE (enabled by default)
+  show spoof-related defines in STATS d
+
+ SPOOF_WELCOME (disabled by default)
+  only show nickname for spoofed clients in RPL_WELCOME
+
+ SPOOF_WELCOME_ALL (disabled by default)
+  only show nickname for all clients in RPL_WELCOME
+
+ SPOOF_IP ("255.255.255.255" by default)
+  what to show instead of the real IP address of spoofed clients
+
+ SPOOF_IDENTCHAR ('_' by default)
+  which  character to prefix usernames with
+
+patches included:
+
+ passopts   v1.01 extended PASS options (see doc/passopts.txt)
+ passwdlen  v1.00 PASSWDLEN define (see doc/passwdlen.txt)
+ versionlen v1.00 VERSIONLEN define (see doc/versionlen.txt)
+ whoisextra v1.00 RPL_WHOISEXTRA numeric 320 (see doc/whoisextra.txt)
+
+######################################################################
+
+changelog:
+
+ v1.02
+
+ 2020-01-27 -- mh
+
+  * ircd/s_serv.c:m_sidtrace(): minor cleanup
+
+  * ircd/s_user.c:register_user() fixed bug that caused ip to show up
+    in realname due to not cleaning up after me :( -- mh (reported by
+    patrick)
+
+ v1.01
+
+ 2020-01-17 -- mh
+
+  * included patch versionlen v1.00 to replace hardcoded value
+
+  * POOF_PASSWDLEN extracted to its own patch passwdlen v1.00 and
+    included it
+
+ 2020-01-12 -- mh
+
+  * SPOOF_WELCOME and SPOOF_WELCOME_ALL config.h defines added. both
+    disabled by default. some clients will try to get their local
+    address by parsing the hostname in RPL_WELCOME. this will remove
+    the user@host part from RPL_WELCOME reply on connect for spoofed
+    clients (SPOOF_WELCOME), or for all clients (SPOOF_WELCOME_ALL),
+    and only show the nickname. the latter can be defined without
+    SPOOF defined and will override the former if that is defined.
+    the former can only be defined with SPOOF defined. added to STATS
+    d as S1.
+
+  * SPOOF_IP config.h define added. the IP address shown instead of
+    the real one (for example in /STATS L) for spoofed clients. this
+    defaults to "255.255.255.255".
+
+  * SPOOF_IDENTCHAR config.h define added. you can now define a
+    different character than the default '_' or disable using an
+    ident character entirely. it can be defined without SPOOF defined
+    to block using the character without supporting spoofs. added to
+    STATS d as SI
+
+ 2020-01-11 -- mh
+
+  * included patch whoisextra v1.00
+
+  * RPL_WHOISCLOAKED will use RPL_WHOISEXTRA if it is defined or fall
+    back to 320
+
+  * SPOOF_WHOISCLOAKED message changed to be more in line with the
+    320 used for SSL connections on eu.irc6.net
+
+  * PASSOPTS extracted to its own patch passopts v1.01 and included
+    it
+
+  * initial version based on passopts v1 (po+spoof) which is in turn
+    based on the ircd spoof patch by patrick at ircnet.com:
+    https://github.com/ircnet-com/misc/tree/master/ircd-spoof-patch
+
+######################################################################
diff -rNu irc2.11.2p3/doc/whoisextra.txt irc2.11.2p3.spoof/doc/whoisextra.txt
--- irc2.11.2p3/doc/whoisextra.txt
+++ irc2.11.2p3.spoof/doc/whoisextra.txt
@@ -0,0 +1,24 @@
+######################################################################
+
+whoisextra - RPL_WHOISEXTRA numeric 320 for irc2.11.2p3
+
+######################################################################
+
+define WHOISEXTRA in config.h to add RPL_WHOISEXTRA numeric 320 with
+format ":%s 320 %s %s :%s"
+
+WHOISEXTRA is enabled by default
+
+this is non-standard use of numeric 320
+
+######################################################################
+
+changelog:
+
+ v1.00
+
+ 2020-01-11 -- mh
+
+  * initial version
+
+######################################################################
diff -rNu irc2.11.2p3/doc/passopts.txt irc2.11.2p3.spoof/doc/passopts.txt
--- irc2.11.2p3/doc/passopts.txt
+++ irc2.11.2p3.spoof/doc/passopts.txt
@@ -0,0 +1,171 @@
+######################################################################
+
+passopts - extended PASS options for irc2.11.2p3
+
+######################################################################
+
+an attempt to solve the problem with clients connecting with a
+password, expecting it to match an I-line, but matching another non-
+passworded I-line (possibly revealing their real address if spoofed)
+
+this current proposal (passopts v1) is far from perfect and it still
+needs some adjusting, it might change entirely. it does not work with
+: prefixed passwords (passwords which may or may not have a space)
+
+i does however work quite well for many clients and is not breaking
+anything for the rest (passopts just doesnt work for them)
+
+PASSOPTS is enabled by default
+
+######################################################################
+
+current proposal (as implemented in passopts v1):
+
+ PASS <password> [<passopts>]
+
+  ignore remaining arguments if any
+
+  <password>
+   password as per RFC
+
+  <passopts>
+   integer (in base 10 only) bitfield of password options
+
+  fail gracefully if <passopts> is not numeric (as if 0)
+
+  ignore unknown bits if any
+
+  allow prepended 0s
+
+  0x01 POFLAG_REQPASS
+    require I-line password match client password and do not allow
+    matching empty I-line password
+
+  examples:
+
+   PASS mustmatch 1
+   PASS dontcare 0
+   PASS mustmatch 007
+   PASS dontcare 42
+   PASS mustmatch 1 any thing
+
+ thank you to the following people for helping with the first draft
+ of the passopts specification: BR and patrick
+
+######################################################################
+
+client compatibility notes (passopts v1):
+
+ rev 1.03 -- mh 20200118
+  * major cosmetic cleanup
+ rev 1.02 -- mh 20200107
+  * kiwiirc client compatibility updated (removed reminder to self -
+    "PASS :x y" is being looked into now :)
+  * weechat client compatibility updated (from doni/patrick)
+  * minor cosmetic cleanup
+ rev 1.01 -- mh 20200106
+  * minor cosmetic ckeanup
+  * kiwiirc.com client compatibility added
+  * xchat and colloquy client compatibility added (from proto)
+ rev 1.00 -- mh 20200106
+  * first draft
+
+ Android IRC (IRC for Android)                           [compatible]
+
+  no known issues
+
+
+ Colloquy                                                [compatible]
+
+  no known issues
+
+
+ ircII/EPIC                                       [almost compatible]
+
+  /xeval xecho $serverctl(SET 0 PASSWORD <password> <passopts>)
+
+
+ Irssi                                                   [compatible]
+
+  /connect <server> <port> "<pass> <passopts>"
+
+  config stores password correctly, and client generally supports
+  passopts (as long as they are given in quotes)
+
+  commandline -w and --password do not work - even if quoted
+
+
+ kiwiirc.com                                         [not compatible]
+
+  sends ":<password> <passopts>" which does not work
+
+
+ mibbit.com                                          [not compatible]
+
+  does not support spaces in the password field
+
+
+ mIRC                                                    [compatible]
+
+  no known issues
+
+
+ Palaver for IOS                                         [compatible]
+
+  no known issues
+
+
+ Textual                                                 [compatible]
+
+  no known issues
+
+
+ webchat.ircnet.net                                  [not compatible]
+
+  does not have a password field enabled at all
+
+
+ weechat                                             [not compatible]
+
+  sends ":<password> <passopts>" which does not work
+
+
+ xchat                                                   [compatible]
+
+  no known issues
+
+
+ znc                                                     [compatible]
+
+  no known issues
+
+ if you find a mistake in the list or have any new information about
+ a client please let me know -- mh on IRCnet #ircnet.com
+
+ thank you to the following people for helping with and reporting
+ results on client compatibility tests: BR, doni, patrick, and proto
+
+######################################################################
+
+changelog:
+
+ v1.01
+
+ 2020-01-12 -- mh
+
+  * ircd/s_conf.c:attach_Iline(): simplified the code sending an
+    error if a clients required password didnt match any I-line
+
+  * removed passopts spec. from source, its in doc/passopts.txt now
+
+ 2020-01-11 -- mh
+
+  * passopts are now checked against defined flags, not a hardcoded
+    value. so far there is only one flag POFLAG_REQPASS
+
+  * added doc/passopts.txt to patch.
+
+  * based on passopts v1 (po+spoof) which is in turn based on the
+    ircd spoof patch by patrick at ircnet.com.
+
+######################################################################
diff -rNu irc2.11.2p3/doc/versionlen.txt irc2.11.2p3.spoof/doc/versionlen.txt
--- irc2.11.2p3/doc/versionlen.txt
+++ irc2.11.2p3.spoof/doc/versionlen.txt
@@ -0,0 +1,22 @@
+######################################################################
+
+versionlen - easy access config.h VERSIONLEN define for irc2.11.2p3
+
+######################################################################
+
+define VERSIONLEN in config.h to override the default ircd version
+string length limit.
+
+VERSIONLEN defaults to 32
+
+######################################################################
+
+changelog:
+
+ v1.00
+
+ 2020-01-17 -- mh
+
+  * initial version
+
+######################################################################
diff -rNu irc2.11.2p3/doc/passwdlen.txt irc2.11.2p3.spoof/doc/passwdlen.txt
--- irc2.11.2p3/doc/passwdlen.txt
+++ irc2.11.2p3.spoof/doc/passwdlen.txt
@@ -0,0 +1,21 @@
+######################################################################
+
+passwdlen - easy config.h access PASSWDLEN define for irc2.11.2p3
+
+######################################################################
+
+define PASSWDLEN in config.h to override the default ircd PASSWDLEN
+
+PASSWDLEN defaults to 128
+
+######################################################################
+
+changelog:
+
+ v1.00
+
+ 2020-01-17 -- mh
+
+  * initial version based on passopts v1 (po+spoof)
+
+######################################################################
diff -rNu irc2.11.2p3/common/match.c irc2.11.2p3.spoof/common/match.c
--- irc2.11.2p3/common/match.c
+++ irc2.11.2p3.spoof/common/match.c
@@ -335,5 +335,9 @@
 	ch = username;
 	if (*ch == '+' || *ch == '=' || *ch == '-' ||
+#ifdef SPOOF_IDENTCHAR
+		*ch == '^' || *ch == '~' || *ch == SPOOF_IDENTCHAR)
+#else
 		*ch == '^' || *ch == '~')
+#endif
 	{
 		/* do not allow them as first char */
diff -rNu irc2.11.2p3/common/numeric_def.h irc2.11.2p3.spoof/common/numeric_def.h
--- irc2.11.2p3/common/numeric_def.h
+++ irc2.11.2p3.spoof/common/numeric_def.h
@@ -237,4 +237,16 @@
 #define RPL_WHOISCHANNELS    319
 
+#ifdef WHOISEXTRA
+#define RPL_WHOISEXTRA       320 /* catch-all extra WHOIS information reply - non-standard use of 320 -- mh 20200111 */
+#endif
+
+#ifdef SPOOF_WHOISCLOAKED
+#ifdef RPL_WHOISEXTRA
+#define RPL_WHOISCLOAKED     RPL_WHOISEXTRA
+#else
+#define RPL_WHOISCLOAKED     320 /* client is cloaked/spoofed - non-standard use of 320 -- mh 20191230 */
+#endif
+#endif
+
 #define RPL_LISTSTART        321
 #define RPL_LIST             322
diff -rNu irc2.11.2p3/common/patchlevel.h irc2.11.2p3.spoof/common/patchlevel.h
--- irc2.11.2p3/common/patchlevel.h
+++ irc2.11.2p3.spoof/common/patchlevel.h
@@ -20,3 +20,8 @@
 #define PATCHLEVEL "0211020003"		/* for server identification */
 #define DEVLEVEL 'a'
+#define PASSWDLEN_VERSION "1.00"
+#define VERSIONLEN_VERSION "1.00"
+#define PASSOPTS_VERSION "1.01"
+#define SPOOF_VERSION "1.02"
+#define WHOISEXTRA_VERSION "1.00"
 #endif
diff -rNu irc2.11.2p3/common/struct_def.h irc2.11.2p3.spoof/common/struct_def.h
--- irc2.11.2p3/common/struct_def.h
+++ irc2.11.2p3.spoof/common/struct_def.h
@@ -53,5 +53,7 @@
 #define	TOPICLEN	255
 #define	CHANNELLEN	50
+#ifndef PASSWDLEN
 #define	PASSWDLEN 	20
+#endif
 #define	KEYLEN		23
 #define	BUFSIZE		512		/* WARNING: *DONT* CHANGE THIS!!!! */
@@ -193,7 +195,14 @@
 #define FLAGS_AWAY	0x0020 /* user is away */
 #define FLAGS_EXEMPT    0x0040 /* user is exempted from k-lines */
+#ifdef SPOOF
+#define FLAGS_SPOOFED   0x0080 /* user is spoofed */
+#endif
 #ifdef XLINE
 #define FLAGS_XLINED	0x0100	/* X-lined client */
 #endif
+#ifdef PASSOPTS
+#define FLAGS_REQPASS   0x0200 /* require the given password match an I-line password to connect -- mh 20200102 */
+#define POFLAG_REQPASS  0x01   /* passopts flag to require password to match and be present in I-line -- mh 20200111 */
+#endif
 #define	SEND_UMODES	(FLAGS_INVISIBLE|FLAGS_OPER|FLAGS_WALLOP|FLAGS_AWAY|FLAGS_RESTRICT)
 #define	ALL_UMODES	(SEND_UMODES|FLAGS_LOCOP)
@@ -264,4 +273,12 @@
 #define ClearXlined(x)		((x)->user->flags &= ~FLAGS_XLINED)
 #endif
+#ifdef SPOOF
+#define IsSpoofed(x)        ((x)->user && (x)->user->flags & FLAGS_SPOOFED)
+#define SetSpoofed(x)       ((x)->user->flags |= FLAGS_SPOOFED)
+#endif
+#ifdef PASSOPTS
+#define IsReqPass(x)    ((x)->user && (x)->user->flags & FLAGS_REQPASS)
+#define SetReqPass(x)   ((x)->user->flags |= FLAGS_REQPASS)
+#endif
 
 
@@ -376,4 +393,7 @@
 #define CFLAG_XEXEMPT		0x00080
 #endif
+#ifdef SPOOF
+#define CFLAG_SPOOFED       0x00200
+#endif
 
 #define IsConfRestricted(x)	((x)->flags & CFLAG_RESTRICTED)
@@ -387,4 +407,7 @@
 #define IsConfXlineExempt(x)	((x)->flags & CFLAG_XEXEMPT)
 #endif
+#ifdef SPOOF
+#define IsConfSpoofed(x)        ((x)->flags & CFLAG_SPOOFED)
+#endif
 
 #define PFLAG_DELAYED		0x00001
diff -rNu irc2.11.2p3/common/support.c irc2.11.2p3.spoof/common/support.c
--- irc2.11.2p3/common/support.c
+++ irc2.11.2p3.spoof/common/support.c
@@ -783,5 +783,9 @@
 {
 	int ve, re, mi, dv, pl;
+#ifdef VERSIONLEN
+	char ver[VERSIONLEN];
+#else
 	char ver[15];
+#endif
 
 	sscanf(PATCHLEVEL, "%2d%2d%2d%2d%2d", &ve, &re, &mi, &dv, &pl);
@@ -795,4 +799,10 @@
 	if (pl)	/* patchlevel */
 		sprintf(ver + strlen(ver), "p%d", pl);
+#ifdef PASSOPTS
+	strcat(ver, "+po");
+#endif
+#ifdef SPOOF
+	strcat(ver, "+spoof");
+#endif
 	return mystrdup(ver);
 }
diff -rNu irc2.11.2p3/ircd/s_conf.c irc2.11.2p3.spoof/ircd/s_conf.c
--- irc2.11.2p3/ircd/s_conf.c
+++ irc2.11.2p3.spoof/ircd/s_conf.c
@@ -506,4 +506,12 @@
 			continue;
 		}
+#ifdef PASSOPTS
+		/* try another I-line if client password is required to match
+		 * I-line password, and I-line does not have one -- mh 20200102 */
+		if (IsReqPass(cptr) && BadPtr(aconf->passwd))
+		{
+			continue;
+		}
+#endif
 
 		/* If anything in aconf->name... */
@@ -614,8 +622,25 @@
 			find_bounce(cptr, ConfClass(aconf), -1);
 		}
+#ifdef SPOOF
+		if(IsConfSpoofed(aconf))
+		{
+			strcpy(cptr->sockhost, aconf->name2);
+			strcpy(cptr->user->host, aconf->name2);
+			SetSpoofed(cptr);
+		}
+#endif
 		break;
 	}
 	if (retval == -2)
 	{
+#ifdef PASSOPTS
+		if (IsReqPass(cptr))
+		{
+			/* client requested password to match but no I-line passwords did */
+			sendto_one(cptr, replies[ERR_PASSWDMISMATCH], ME, BadTo(cptr->name));
+			retval = -8; /* EXITC_BADPASS */
+			return retval;
+		}
+#endif
 		find_bounce(cptr, 0, -2);
 	}
@@ -1800,4 +1825,12 @@
 			}
 
+#ifdef SPOOF
+			/* any spoofed host in this line? */
+			if(aconf->status & CONF_CLIENT && tmp4 && *tmp4)
+			{
+				DupString(aconf->name2, tmp4);
+				aconf->flags |= CFLAG_SPOOFED;
+			}
+#endif
 			/* trying to find exact conf line in already existing
 			 * conf, so we don't delete old one, just update it */
diff -rNu irc2.11.2p3/ircd/s_debug.c irc2.11.2p3.spoof/ircd/s_debug.c
--- irc2.11.2p3/ircd/s_debug.c
+++ irc2.11.2p3.spoof/ircd/s_debug.c
@@ -342,4 +342,55 @@
 		CLIENTS_CHANNEL_LEVEL);
 #endif
+#ifdef SPOOF_STATSDEFINE
+	/* spoof defines
+	 *
+	 * -- mh 20200105
+	 *
+	 * Spoof:<version> S1:<welcome> SN:<notice> SW:<whois> SI:<identchar> PO:<passopts>
+	 *
+	 * version     SPOOF_VERSION string
+	 * welcome     2 if SPOOF_WELCOME_ALL is defined, 1 if SPOOF_WELCOME is defined, otherwise 0
+	 * notice      1 if SPOOF_NOTICE is defined, otherwise 0
+	 * whois       1 if SPOOF_WHOISCLOAKED is defined, otherwise 0
+	 * identchar   0 if SPOOF_IDENTCHAR is not defined, otherwise SPOOF_IDENTCHAR character singe-quoted
+	 * passopts    0 if PASSOPTS is not defined, otherwise PASSOPTS_VERSION string
+	 *
+	 */
+#ifdef SPOOF_IDENTCHAR
+	sendto_one(cptr, ":%s %d %s :Spoof:%s S1:%d SN:%d SW:%d SI:'%c' PO:%s", ME, RPL_STATSDEFINE, nick, SPOOF_VERSION,
+#else
+	sendto_one(cptr, ":%s %d %s :Spoof:%s S1:%d SN:%d SW:%d SI:%d PO:%s", ME, RPL_STATSDEFINE, nick, SPOOF_VERSION,
+#endif
+#ifdef SPOOF_WELCOME_ALL
+		2,
+#else
+#ifdef SPOOF_WELCOME
+		1,
+#else
+		0,
+#endif
+#endif
+#ifdef SPOOF_NOTICE
+		1,
+#else
+		0,
+#endif
+#ifdef SPOOF_WHOISCLOAKED
+		1,
+#else
+		0,
+#endif
+#ifdef SPOOF_IDENTCHAR
+		SPOOF_IDENTCHAR,
+#else
+		0,
+#endif
+#ifdef PASSOPTS
+		PASSOPTS_VERSION
+#else
+		"0"
+#endif
+	);
+#endif
 	/* note that it's safe to check extend[1], it will at worst be null.
 	** if we ever need extend[2], check length first... --B. */
diff -rNu irc2.11.2p3/ircd/s_err.c irc2.11.2p3.spoof/ircd/s_err.c
--- irc2.11.2p3/ircd/s_err.c
+++ irc2.11.2p3.spoof/ircd/s_err.c
@@ -353,5 +353,17 @@
 /* 318 RPL_ENDOFWHOIS */	":%s 318 %s %s :End of WHOIS list.",
 /* 319 RPL_WHOISCHANNELS */	":%s 319 %s %s :%s",
+#ifdef RPL_WHOISEXTRA
+/* 320 RPL_WHOISEXTRA */    ":%s 320 %s %s :%s", /* catch-all extra WHOIS information reply - non-standard use of 320 -- mh 20200111 */
+#else
+#ifdef RPL_WHOISCLOAKED
+#ifndef RPL_WHOISEXTRA
+/* 320 RPL_WHOISCLOAKED */  ":%s 320 %s %s :%s", /* client is cloaked/spoofed - non-standard use of 320 -- mh 20191230 */
+#endif
+#else
+#ifndef RPL_WHOISEXTRA
 /* 320 */ (char *)NULL,
+#endif
+#endif
+#endif
 /* 321 RPL_LISTSTART */	":%s 321 %s Channel :Users  Name",
 /* 322 RPL_LIST */	":%s 322 %s %s %d :%s",
diff -rNu irc2.11.2p3/ircd/s_misc.c irc2.11.2p3.spoof/ircd/s_misc.c
--- irc2.11.2p3/ircd/s_misc.c
+++ irc2.11.2p3.spoof/ircd/s_misc.c
@@ -197,5 +197,9 @@
 					sptr->name, USERLEN,
 					(!(sptr->flags & FLAGS_GOTID)) ? "" :
+#ifdef SPOOF
+					sptr->auth, sptr->user ? get_client_ip(sptr) :
+#else
 					sptr->auth, sptr->user ? sptr->user->sip :
+#endif
 #ifdef INET6 
 					      inetntop(AF_INET6,
@@ -248,4 +252,18 @@
 }
 
+#ifdef SPOOF
+char	*get_client_ip(aClient *cptr)
+{
+	if(IsSpoofed(cptr))
+	{
+		return SPOOF_IP;
+	}
+	else
+	{
+		return cptr->user->sip;
+	}
+}
+#endif
+
 /*
  * Form sockhost such that if the host is of form user@host, only the host
diff -rNu irc2.11.2p3/ircd/s_misc_ext.h irc2.11.2p3.spoof/ircd/s_misc_ext.h
--- irc2.11.2p3/ircd/s_misc_ext.h
+++ irc2.11.2p3.spoof/ircd/s_misc_ext.h
@@ -43,4 +43,7 @@
 EXTERN char *get_client_name (aClient *sptr, int showip);
 EXTERN char *get_client_host (aClient *cptr);
+#ifdef SPOOF
+EXTERN char *get_client_ip (aClient *cptr);
+#endif
 EXTERN void get_sockhost (Reg aClient *cptr, Reg char *host);
 EXTERN char *my_name_for_link (char *name, Reg int count);
diff -rNu irc2.11.2p3/ircd/s_serv.c irc2.11.2p3.spoof/ircd/s_serv.c
--- irc2.11.2p3/ircd/s_serv.c
+++ irc2.11.2p3.spoof/ircd/s_serv.c
@@ -1265,5 +1265,9 @@
 					   acptr->user->username,
 					   acptr->user->host,
+#ifdef SPOOF
+					   get_client_ip(acptr),
+#else
 					   acptr->user->sip,
+#endif
 					   (*buf) ? buf : "+", acptr->info);
 		    }
@@ -1784,4 +1788,8 @@
 			else if ((tmp->status & CONF_CLIENT))
 			{
+#ifdef SPOOF
+				if(IsConfSpoofed(tmp))
+					continue;
+#endif
 				sendto_one(sptr, replies[p[1]], ME, BadTo(to),
 					   c, host, (pass) ? "*" : null,
@@ -2858,5 +2866,9 @@
 				get_client_class(acptr),
 				acptr->name, acptr->user->username,
+#ifdef SPOOF
+				acptr->user->host, get_client_ip(acptr),
+#else
 				acptr->user->host, acptr->user->sip,
+#endif
 #ifdef XLINE
 				acptr->user2, acptr->user3, 
@@ -2881,5 +2893,9 @@
 				get_client_class(acptr), 
 				acptr->name, acptr->user->username, 
+#ifdef SPOOF
+				acptr->user->host, get_client_ip(acptr),
+#else
 				acptr->user->host, acptr->user->sip,
+#endif
 #ifdef XLINE
 				acptr->user2, acptr->user3, 
@@ -2917,5 +2933,9 @@
 			MyClient(acptr) ? get_client_class(acptr) : -1, 
 			acptr->name, acptr->user->username,
+#ifdef SPOOF
+			cptr->user->host, get_client_ip(acptr),
+#else
 			acptr->user->host, acptr->user->sip, 
+#endif
 #ifdef XLINE
 			MyClient(acptr) ? acptr->user2 : "-",
diff -rNu irc2.11.2p3/ircd/s_service.c irc2.11.2p3.spoof/ircd/s_service.c
--- irc2.11.2p3/ircd/s_service.c
+++ irc2.11.2p3.spoof/ircd/s_service.c
@@ -181,5 +181,9 @@
 			(wants & SERVICE_WANT_USER) ? sptr->user->username : ".",
 			(wants & SERVICE_WANT_USER) ? sptr->user->host : ".",
+#ifdef SPOOF
+			(wants & SERVICE_WANT_USER) ? get_client_ip(sptr) : ".",
+#else
 			(wants & SERVICE_WANT_USER) ? sptr->user->sip : ".",
+#endif
 			(wants & (SERVICE_WANT_UMODE|SERVICE_WANT_OPER)) ? umode : "+",
 			(wants & SERVICE_WANT_USER) ? sptr->info : "");
diff -rNu irc2.11.2p3/ircd/s_user.c irc2.11.2p3.spoof/ircd/s_user.c
--- irc2.11.2p3/ircd/s_user.c
+++ irc2.11.2p3.spoof/ircd/s_user.c
@@ -582,4 +582,7 @@
 			return exit_client(cptr, cptr, &me, exit_msg[i].longm);
 		}
+#ifdef SPOOF
+		aconf = sptr->confs->value.aconf;
+#endif
 #ifndef	NO_PREFIX
 		if (IsRestricted(sptr))
@@ -599,5 +602,17 @@
 #endif
 
+#ifdef SPOOF
+#ifdef SPOOF_IDENTCHAR
+		if(IsConfSpoofed(aconf))
+		{
+			prefix = SPOOF_IDENTCHAR;
+			*user->username = prefix;
+			strncpy(&user->username[1], buf2, USERLEN);
+			user->username[USERLEN] = '\0';
+		}
+#endif
+#else
 		aconf = sptr->confs->value.aconf;
+#endif
 #ifdef UNIXPORT
 		if (IsUnixSocket(sptr))
@@ -746,5 +761,23 @@
 			);
 #endif
+#ifdef SPOOF_WELCOME_ALL
+		/* only show nickname in RPL_WELCOME reply on connect for all clients -- mh 20200115*/
+		sprintf(buf, "%s", nick);
+#else
+#ifdef SPOOF_WELCOME
+		/* only show nickname in RPL_WELCOME reply on connect for spoofed clients
+		 * but  full nickname!user@host for non-spoofed clients -- mh 20200112 */
+		if (IsSpoofed(sptr))
+		{
+			sprintf(buf, "%s", nick);
+		}
+		else
+		{
+			sprintf(buf, "%s!%s@%s", nick, user->username, user->host);
+		}
+#else
 		sprintf(buf, "%s!%s@%s", nick, user->username, user->host);
+#endif
+#endif
 		add_to_uid_hash_table(sptr->user->uid, sptr);
 		sptr->exitc = EXITC_REG;
@@ -771,4 +804,12 @@
 		if (IsRestricted(sptr))
 			sendto_one(sptr, replies[ERR_RESTRICTED], ME, BadTo(nick));
+#ifdef SPOOF_NOTICE
+		/* send a notice to client if the connection is spoofed.
+		 * notice is defined as SPOOF_NOTICE in config.h -- mh 20191230 */
+		if (IsConfSpoofed(sptr->confs->value.aconf))
+		{
+			sendto_one(sptr, ":%s NOTICE %s :%s", ME, nick, SPOOF_NOTICE);
+		}
+#endif
 		if (IsConfNoResolve(sptr->confs->value.aconf))
 		{
@@ -807,5 +848,9 @@
 				":%s UNICK %s %s %s %s %s %s :%s",
 				user->servp->sid, nick, user->uid,
+#ifdef SPOOF
+				user->username, user->host, get_client_ip(sptr),
+#else
 				user->username, user->host, user->sip,
+#endif
 				(*buf) ? buf : "+", sptr->info);
 	}	/* for(my-leaf-servers) */
@@ -2044,4 +2089,13 @@
 		sendto_one(sptr, replies[RPL_WHOISOPERATOR], ME, BadTo(sptr->name), name);
 
+#ifdef SPOOF_WHOISCLOAKED
+	/* send a 320 numeric RPL_WHOISCLOAKED reply if client is spoofed.
+	 * reply defined as SPOOF_WHOISCLOAKED in config.h -- mh 20191230 */
+	if (IsSpoofed(acptr))
+	{
+		sendto_one(sptr, replies[RPL_WHOISCLOAKED], ME, BadTo(sptr->name), name, SPOOF_WHOISCLOAKED);
+	}
+#endif
+
 	if (acptr->user && MyConnect(acptr))
 		sendto_one(sptr, replies[RPL_WHOISIDLE], ME, BadTo(sptr->name),
@@ -2206,4 +2260,7 @@
 	int	what,i;
 	char 	*s;
+#ifdef PASSOPTS
+	Reg char *passopts; /* password options set in extended PASS argument -- mh 20200102 */
+#endif
 
 	if (MyConnect(cptr) && IsUnknown(cptr) &&
@@ -2301,5 +2358,37 @@
 	reorder_client_in_list(sptr);
 	if (sptr->info != DefInfo)
+#ifdef PASSOPTS
+	{
+		/* if we have extended PASS arguments, attempt to parse them. -- mh 20200102 */
+		/* see doc/passopts.txt for more information -- mh 20200112 */
+
+		/* do we need to check if sptr->info is NULL first? i dont think so -- mh 20200102 */
+		if (strlen(sptr->info) > 0)
+		{
+			/* extended PASS arguments found */
+			for (s = passopts = strtoken(&s, sptr->info, " "); *s; s++)
+			{
+				if (!isdigit(*s))
+				{
+					/* passopts must be numeric only */
+					break;
+				}
+			}
+			if (*s == '\0')
+			{
+				/* passopts valid, parse it */
+				i = atoi(passopts); /* overflow checking needed? -- mh 20200102 */
+				if (POFLAG_REQPASS & i)
+				{
+					/* password required to match I-line password */
+					SetReqPass(sptr);
+				}
+			}
+		}
 		MyFree(sptr->info);
+	}
+#else
+		MyFree(sptr->info);
+#endif
 	if (strlen(realname) > REALLEN)
 		realname[REALLEN] = '\0';
diff -rNu irc2.11.2p3/support/config.h.dist irc2.11.2p3.spoof/support/config.h.dist
--- irc2.11.2p3/support/config.h.dist
+++ irc2.11.2p3.spoof/support/config.h.dist
@@ -18,4 +18,138 @@
  */
 
+/************************************************************************
+ *
+ * whoisextra (see doc/whoisextra)
+ *
+ * WHOISEXTRA
+ *  undefine to disable RPL_WHOISEXTRA numeric 320 WHOIS catch-all reply
+ *
+ *  (non-standard use of numeric 320)
+ *
+ */
+
+#define WHOISEXTRA
+
+
+/************************************************************************
+ *
+ * spoof (see doc/spoof.txt)
+ *
+ * SPOOF
+ *
+ *  undef to disable spoofs in I-lines.
+ *
+ * SPOOF_IDENTCHAR
+ *
+ *  undef to disable using spoof ident character, or define it to the
+ *  character you want to use.
+ *
+ *  you may want to leave this defined even without SPOOF defined if
+ *  other servers on the network use spoofs with ident character.
+ *
+ * SPOOF_WELCOME_ALL
+ *
+ *  define to only show nickname in RPL_WELCOME reply on connect for all
+ *  clients. this overrides SPOOF_WELCOME and extends the feature to all
+ *  clients.
+ *
+ * SPOOF_WELCOME
+ *
+ *  (only available when SPOOF is defined)
+ *
+ *  define to only show nickname in RPL_WELCOME reply on connect for
+ *  spoofed clients, otherwise nickname!user@host is shown with spoofed
+ *  address.
+ *
+ *  (https://modern.ircdocs.horse/#rplwelcome-001 some clients might try
+ *   to get their local address by parsing the hostname in RPL_WELCOME).
+ *
+ * SPOOF_NOTICE
+ *
+ *  (only available when SPOOF is defined)
+ *
+ *  undef to disable sending a notice to clients connecting if they are
+ *  spoofed, or define to the message you want to send
+ *
+ * SPOOF_WHOISCLOAKED
+ *
+ *  (only available when SPOOF is defined)
+ *
+ *  undef to disable sending a RPL_WHOISCLOAKED in /WHOIS reply for
+ *  spoofed (local) clients, or define to the message you want to show
+ *  for them
+ *
+ *  (will define to RPL_WHOISEXTRA if available, otherwise non-standard
+ *  use of numeric 320).
+ *
+ * SPOOF_STATSDEFINE
+ *
+ *  (only available when SPOOF is defined)
+ *
+ *  undef to disable showing spoof related defines in /STATS d.
+ *
+ *  (currently only documented in source: ircd/s_debug.c).
+ *
+ * SPOOF_IP
+ *
+ *  (only available when SPOOF is defined)
+ *
+ *  the IP address shown instead of the real one (for example in /STATS
+ *  L) for spoofed clients. this is a required define.
+ *
+ */
+
+#define SPOOF
+#define SPOOF_IDENTCHAR    '_'
+/* #define SPOOF_WELCOME_ALL */
+
+#ifdef SPOOF
+/* #define SPOOF_WELCOME */
+#define SPOOF_NOTICE       "Due to an administrative decision, your connection is cloaked."
+#define SPOOF_WHOISCLOAKED "is a Cloaked Connection (Spoof)"
+#define SPOOF_STATSDEFINE
+#define SPOOF_IP           "255.255.255.255"
+#endif
+
+
+/************************************************************************
+ *
+ * passopts (see doc/passopts.txt)
+ *
+ * PASSOPTS
+ *
+ *  undefine to disable support for extended PASS options v1
+ *
+ */
+
+#define PASSOPTS
+
+
+/************************************************************************
+ *
+ * versionlen (see doc/versionlen.txt)
+ *
+ * VERSIONLEN will override the default ircd version string length limit
+ * if defined
+ *
+ */
+
+#define VERSIONLEN 32
+
+
+/************************************************************************
+ *
+ * passwdlen (see doc/passwdlen.txt)
+ *
+ * PASSWDLEN
+ *
+ *  undefine to use ircs old default PASSWDLEN value, or define it to
+ *  the desired password length
+ *
+ */
+
+#define PASSWDLEN 128
+
+
 /*
  *  ircdwatch configuration options.
@@ -794,4 +928,24 @@
 /* ------------------------- END CONFIGURATION SECTION -------------------- */
 
+#ifdef SPOOF
+/* we require these if SPOOF is defined */
+#ifndef SPOOF_IP
+#define SPOOF_IP "255.255.255.255"
+#endif
+/* SPOOF_WELCOME_ALL overrrides SPOOF_WELCOME */
+#ifdef SPOOF_WELCOME
+#ifdef SPOOF_WELCOME_ALL
+#undef SPOOF_WELCOME
+#endif
+#endif
+#else
+/* we dont want these if SPOOF is not defined */
+#undef SPOOF_WELCOME
+#undef SPOOF_NOTICE
+#undef SPOOF_WHOISCLOAKED
+#undef SPOOF_STATSDEFINE
+#undef SPOOF_IP
+#endif
+
 #ifndef ENABLE_SUMMON
 #  undef LEAST_IDLE
